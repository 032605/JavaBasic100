package OOP2.inteface;

//인터페이스 란?
//사전적 의미 : 사용자간 또는 컴퓨터간 통신이 가능하도록 해주는 디바이스나 프로그램.
//상호간 통신을 위해서는 "규격"이 중요. > 하나의 표준화를 제공

//추상 클래스 vs 인터페이스 > 거의 비슷하지만, 인터페이스가 추상화가 정도가 더 높음 (더 엄격) 
//인터페이스에는 일반 메서드 멤버 필드(변수)를 가질 수 없음.

//표준화 및 규격을 인터페이스로 제공. 어떤 클래스가 해당 인터페이스를 사용(상속)한다면 인터페이스에 선언된 메서드를 구현해야함.
//class > extends ========== interface > implements
// 우선 순위 : extends > implements
// Ex) class Student extends Person implements A, B
//추상 클래스와 같이 메서드의 구체적인 내용은 기술되어져 있지 않아 인터페이스를 상속받은 클래스에서 재정의(오버라이딩)하여 사용.

//상속 vs 구현
//클래스는 "단일 상속"만, 인터페이스는 "다중 상속"이 가능.
//인터페이스는 extends 표현하지 않고 "구현"의 의미 강조 implements 키워드 사용 > 다중 상속 구현

// 장점 : 메서드의 추상적인 선언과 구체적인 구현을 부분을 분리시킬 수 있다.

// Person 클래스(S) / A 인터페이스(S) / B 인터페이스(S) / Student 클래스(C) / Main 클래스(메인 머스다가 포함, 객체 생성)
public interface oop_interface {
	
	
}
